{
  "version": 3,
  "sources": ["../../node_modules/http-service-ts/lib/request.parser.js", "../../node_modules/http-service-ts/lib/service.js", "../../node_modules/http-service-ts/lib/index.js", "../../src/authentication.ts", "../../src/exceptions/JaiException.ts", "../../src/exceptions/authentication/MissingApiKeyException.ts", "../../src/cli.ts"],
  "sourcesContent": ["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @class\n *\n * Allows to make requests and save some configurations for future\n * requests too. Accepts an API root at the constructor that can be used\n * to fix an URL to fetch. If one be provided, every future request will\n * fetch this URL + the URL passed in `RequestArgs` interface.\n */\nclass RequestParser {\n    /**\n     * @param {string} [root] You can provide a value for root property\n     * or simply pass one every time you access `request()` method.\n     * @param {HttpConfig} [config] Configurations that will be aplied\n     * in every request.\n     */\n    constructor(root, config) {\n        this.root = root;\n        /**\n         * @param {string} start First piece of URL (API root). E.g. `'https://api.example.com'`\n         * @param {string} [final] Last piece of URL. E.g. `'users/12'`\n         *\n         * @returns {string} URL with a slash between its first and last pieces or a slash at the end of the first.\n         */\n        this.hasSlash = (start, end) => end ? start.endsWith('/') || end.startsWith('/') : start.endsWith('/');\n        this.config = config || {\n            headers: new Headers(),\n            appendSlash: false,\n        };\n    }\n    /**\n     * @param {RequestArgs<T>} args Provide request configurations\n     *\n     * @returns {Promise<T>} Promise with parsed content\n     */\n    request(args) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let url = '';\n            // Add root if there's one\n            if (this.root)\n                url = this.root;\n            // Concat root with URI if they were provided\n            if (this.root && args.url)\n                url += this.hasSlash(this.root, args.url) ? args.url : `/${args.url}`;\n            // fetch URL provided in arguments\n            if (!this.root && args.url)\n                url = args.url;\n            // add a slash\n            if (this.config.appendSlash && !this.hasSlash(url))\n                url += '/';\n            // add ID\n            if (args.id)\n                url += this.config.appendSlash ? args.id + '/' : args.id.toString();\n            // Append search params to the end of URL\n            if (args.params) {\n                // Remove last slash and add a \"?\"\n                if (url.endsWith('/'))\n                    url = url.substring(0, url.length - 1);\n                url += '?';\n                // Add params and remove last \"&\"\n                for (const key in args.params)\n                    url += `${key}=${args.params[key]}&`;\n                url = url.substring(0, url.length - 1);\n            }\n            // Configure request\n            const requestInit = {\n                method: args.method.toUpperCase(),\n                headers: args.headers || this.config.headers,\n                mode: args.noCors === true ? 'no-cors' : 'cors',\n            };\n            // Add body if there is one\n            if (args.method !== 'get' && args.obj)\n                requestInit.body = JSON.stringify(args.obj);\n            // Request\n            const req = yield fetch(url, requestInit);\n            // Return promise with parsed content from response\n            return this.parse(req);\n        });\n    }\n    /**\n     * @param {Response} response Response to turn into JSON, Text or Blob\n     *\n     * @returns {Promise<T | string | null | Blob>} Promise with formatted content\n     */\n    parse(response) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let p;\n            const contentType = response.headers.get('content-type');\n            if (contentType === 'application/json')\n                // Object\n                p = yield response.json();\n            else if (contentType && contentType.startsWith('text'))\n                // Text\n                p = yield response.text();\n            else if (!contentType)\n                // Null\n                p = null;\n            // Blob\n            else\n                p = yield response.blob();\n            return new Promise((resolve, reject) => (response.status >= 200 && response.status < 300 ? resolve(p) : reject(p)));\n        });\n    }\n}\nexports.default = RequestParser;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst request_parser_1 = require(\"./request.parser\");\n/**\n * @class\n *\n * Customizable service that allow to perform main HTTP requests.\n * Extends `RequestParser` class. So it's possible to add more types of\n * request when extending this class.\n */\nclass Service extends request_parser_1.default {\n    /**\n     * @param {string} apiRoot Collection path (e.g. `\"https://api.example.com/users/\"`)\n     */\n    constructor(apiRoot, config) {\n        super(apiRoot, config);\n    }\n    /**\n     * @returns {Promise<T[]>} Promise with array of objets\n     */\n    get() {\n        return this.request({ method: 'get' });\n    }\n    /**\n     * @param {number} id Object ID to fetch\n     * @returns {Promise<T>} A promise of object\n     */\n    getById(id) {\n        return this.request({ method: 'get', id });\n    }\n    /**\n     * @param {T} obj Object to post\n     * @returns {Promise<T>} Posted object\n     */\n    post(obj) {\n        return this.request({ method: 'post', obj });\n    }\n    /**\n     * @param {T} obj Object to update\n     * @param {number} id ID of object that will be updated\n     * @returns {Promise<T>} Updated object\n     */\n    put(obj, id) {\n        return this.request({ method: 'put', obj, id });\n    }\n    /**\n     * @param {Partial<T>} obj Object to update\n     * @param {number} id ID of object that will be updated\n     * @returns {Promise<Partial<T>>} Updated object part\n     */\n    patch(obj, id) {\n        return this.request({ method: 'patch', obj, id });\n    }\n    /**\n     * @param {number} id ID of object that will be deleted\n     * @returns {Promise<null>} Null\n     */\n    delete(id) {\n        return this.request({ method: 'delete', id });\n    }\n}\nexports.default = Service;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst service_1 = require(\"./service\");\nexports.Service = service_1.default;\nconst request_parser_1 = require(\"./request.parser\");\nexports.RequestParser = request_parser_1.default;\n", "import {RequestParser, Service} from 'http-service-ts';\nimport {AuthenticationKeyUpdateRequest} from \"./models/authentication/AuthenticationKeyUpdateRequest.interface\";\nimport {MissingApiKeyException} from \"./exceptions/authentication/MissingApiKeyException\";\n\nexport class Authenticator {\n\n    private rootUrl: string = 'https://mycelia.azure-api.net/';\n    private client: RequestParser = new RequestParser();\n\n    public async updateAuthKey(request: AuthenticationKeyUpdateRequest): Promise<string> {\n        this.throwExceptionIfNotAuthenticated();\n\n\n    }\n\n    throwExceptionIfNotAuthenticated() {\n        if (!this.client.config.headers.has('Auth')) {\n            throw new MissingApiKeyException();\n        }\n    }\n\n    getAuthenticatedHttpClient(): RequestParser {\n        return this.client;\n    }\n\n    authenticate(apiKey: string): Authenticator {\n\n        this.client.config.headers.delete('Auth');\n        this.client.config.headers.append('Auth', apiKey)\n\n        // this.client.config.headers.append('Content-Type', 'application/json');\n\n\n        return this;\n    }\n\n    init() {\n        console.debug('Initializing JAI Authenticator...');\n        console.debug(`Endpoint:${this.rootUrl}`);\n    }\n\n}\n\n\n// export const authenticator = {\n//     getAuthKey(): Promise<string> {\n//\n//\n//\n//     }\n// }\n", "export class JaiException extends Error {\n\n    constructor(errorMessage: string) {\n        super(errorMessage);\n\n        // Set the prototype explicitly.\n        Object.setPrototypeOf(this, JaiException.prototype);\n    }\n}\n", "import {JaiException} from \"../JaiException\";\n\nexport class MissingApiKeyException extends JaiException {\n    constructor() {\n        super(\"Your JAI key haven't been registered. Please, invoke 'authenticate' method inside \" +\n            \"an Authenticator instance to do so.\");\n    }\n}\n", "#!/usr/bin/env node\n\nimport {  Authenticator } from './authentication';\n\nconst authenticator = new Authenticator();\n\nauthenticator.init();\n"],
  "mappings": "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",
  "names": []
}
